#include <iostream>
#include <math.h>
using namespace std;

void swap(int &x, int &y){
	int temp = x;
	x = y;
	y = temp; 
} 
 
class MaxHeap{
	public:
		int *harr; 
		int capacity; // heap 最大容量
		int heap_size; // heap 當前大小
		
	MaxHeap(int cap)
	{
		capacity = cap;
		heap_size = 0;
		harr = new int[cap]; //指標陣列for動態記憶體 
	 }
	  
	 /*void linerSearch(int val)
	 {
	 	for(int i ; i < heap_size ; i++)
	 	{
	 		if(harr[i]==val)
	 		{
	 			cout<<val<<"Found!";
				 return; 
			 }
		 }
		 cout<<val<<"Not Found!"; 
	 }*/
	 
	 int currentHeight(int i)
	 {
	 	return ceil (log2(i + 1));
	 }
	 
	 int parent (int i)//回傳 parent node 
	 {
	 	return(i-1)/2 ;
	 }
	 
	 int LeftChild (int i)//回傳 LeftChild node 
	 {
	 	return i*2+1; 
	 }
	 
	 int RightChild (int i)//回傳 RightChild node 
	 {
	 	return i*2+2;
	 }
	 
	 
	 //功能1,2,3:
	  
	//Insert 功能 
	 void insert(int value)
	 {
	 	if(heap_size >= capacity)
	 	{
	 		cout<<"heap is over flow"<<endl;
	 		return;
		 }
		 //在最末端加入value 
		 heap_size++;
		 int i = heap_size - 1;
		 harr[i] = value;
		 //如果value > 他的 parent
		 while(harr[i] > harr[parent(i)] && i!=0) 
		 {
		 	swap(harr[i],harr[parent(i)]);
		 	i = parent(i);
		 	
		 }
	 }
	
	//Print Heap 功能 
	int PrintHeap()
	 {
	 	if (heap_size>0)
	 	{
		 
	 	for(int i = 0 ; i < heap_size ; i++)
	 	{
	 		cout<<harr[i]<<" ";
		 }
		}
		else
			cout<<"The heap is emtpy";
		 
		cout<<endl;
		
	 }
	 
	 //DeleteMax功能 
	 void deleteMax()//仍有問題 
	 {
	 	if(heap_size>0)
	 	{
	 		int lastElement = harr[heap_size-1];
	 		cout<<"last Element is "<<lastElement<<endl;
	 		int i = 0;
	 		cout<<"The heapHeight is "<< currentHeight(heap_size) <<endl;
	 		
			while(currentHeight(i) < currentHeight(heap_size)-1)//有問題 
	 		{
	 			cout<<"leftchild:"<< harr[LeftChild(i)] <<" rightchild:"<< harr[RightChild(i)] <<endl;
			 	if(harr[LeftChild(i)] >= harr[RightChild(i)]){
			 		cout<<harr[i]<<"swap"<<harr[LeftChild(i)]<<endl;
			 		swap(harr[i],harr[LeftChild(i)]);
		 			i = LeftChild(i);
				 }
				else if(harr[RightChild(i)] < harr[RightChild(i)]){ 
				 	cout<<harr[i]<<"swap"<<harr[RightChild(i)]<<endl;
				 	swap(harr[i],harr[RightChild(i)]);
		 			i = RightChild(i);	
				 }
			 }
			 heap_size--;
			 harr[i] = lastElement;
			 cout<<"i="<<harr[i]<<endl;
	 		
	 		
		 }
		 else
		 	cout<<"The heap is emtpy";
		 cout<<endl;
	 }
	 
};

int main(){
	MaxHeap obj(100); //heap 容量
	
	int option ,value;
	do 
	{
		cout<<"=========================================="<<endl;
		cout <<"Which function are you going to use?"<<endl;
		cout << "新增(insert) press 1."<<endl;
		cout << "刪除最大(deleteMax) press 2."<<endl;
		cout << "列印整個堆積(printHeap) press 3."<<endl;
		cout << "離開Exit press 0."<<endl;
		cout<<"=========================================="<<endl;
		
		cin >> option;
		
		switch(option)
		{
			case 0 :
				break;
			case 1 :
				cout << "Enter a value:";
				cin >> value;
				obj.insert(value);
				break;
			case 2:
				cout<<"Delete Max:"<<endl;
				obj.deleteMax();
				break;
			case 3:
				cout << "Print Heap:"<<endl;
				obj.PrintHeap();
				break;
			case 4:
				cout << "the Heap height:"<<endl;
				break;
				
		}
		
	}
	while (option != 0);
	
} 
